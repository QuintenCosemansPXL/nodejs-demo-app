name: CI Pipeline

on:
  workflow_dispatch:
  push:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: Show files and directories
        run: ls -alhR

      - name: Better Test Reports
        uses: mridang/action-test-reporter@v1.5.0
        with:
          coverage-file: coverage/lcov.info

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:${{ github.sha }}

  provision-ec2:
    name: Provision EC2 Instance
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build-and-push]
    outputs:
      instance-id: ${{ steps.create-instance.outputs.instance_id }}
      instance-ip: ${{ steps.get-ip.outputs.public_ip }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create EC2 Instance
        id: create-instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c55b159cbfafe1f0 \
            --instance-type t3.micro \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=nodejs-demo-app},{Key=Environment,Value=production}]' \
            --user-data '#!/bin/bash
            yum update -y
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user' \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "Created EC2 instance: $INSTANCE_ID"

      - name: Wait for Instance to be Running
        run: |
          aws ec2 wait instance-running --instance-ids ${{ steps.create-instance.outputs.instance_id }}
          echo "Instance is now running"

      - name: Get Instance Public IP
        id: get-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ steps.create-instance.outputs.instance_id }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "Instance Public IP: $PUBLIC_IP"

  docker-run:
    name: Run the images on AWS EC2
    runs-on: self-hosted
    needs: [build-and-test, docker-build-and-push]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
  
      - name: Pull Docker Image
        run: |
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:${{ github.sha }}

      - name: Stop and Remove Old Container
        run: |
          sudo docker stop myapp || true
          sudo docker rm myapp || true

      - name: Run Docker Image
        run: |
          sudo docker run -d \
            --name myapp \
            -p 80:5000 \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/nodejs-demo-app:${{ github.sha }}